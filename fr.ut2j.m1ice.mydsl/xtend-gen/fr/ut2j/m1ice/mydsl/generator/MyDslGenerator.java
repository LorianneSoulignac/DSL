/**
 * generated by Xtext 2.14.0
 */
package fr.ut2j.m1ice.mydsl.generator;

import fr.ut2j.m1ice.fsm.FSM;
import fr.ut2j.m1ice.fsm.Final;
import fr.ut2j.m1ice.fsm.Initial;
import fr.ut2j.m1ice.fsm.State;
import fr.ut2j.m1ice.fsm.Transition;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    FSM myFsm = ((FSM) _get);
    fsa.generateFile("MAIN.java", this.generateFsmMainClass(myFsm));
    fsa.generateFile("STATEA.java", this.generateAbstractState());
    fsa.generateFile("STATEN.java", this.generateNormalState());
    fsa.generateFile("TRANSITION.java", this.generateTransition());
  }
  
  public String generateTransition() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(" ");
    _builder.append("public class Transition {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("private StateAbstr stateStart;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("private StateAbstr stateEnd;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("private String trigger;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("public Transition(StateAbstr src, StateAbstr target, String trigger) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("this.stateStart = src;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("this.stateEnd = target;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("this.trigger = trigger;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("public StateAbstr getStateStart() { return this.src; }");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("public StateAbstr getStateEnd() { return this.target; }");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("public String getTrigger() { return this.trigger; }");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} ");
    return _builder.toString();
  }
  
  public String generateNormalState() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class State extends StateAbstr {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("public State(String name) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("super(name);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    return _builder.toString();
  }
  
  public String generateAbstractState() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.Objects;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class StateAbstr {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("private String state;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public StateAbstr(st)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("this.state = st;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public StateAbstr getState() {return this.state;}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public void setState(newSt) {this.state = newSt;}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("public boolean equals(Object o) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (this == o) return true;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (o == null || getClass() != o.getClass()) return false;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("StateAbstr that = (StateAbstr) o;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return Objects.equals(name, that.name);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("}");
    return _builder.toString();
  }
  
  public String generateFsmMainClass(final FSM fsm) {
    final Function1<State, Boolean> _function = (State state) -> {
      return Boolean.valueOf((state instanceof Initial));
    };
    State initState = ((State[])Conversions.unwrapArray(IterableExtensions.<State>filter(fsm.getState(), _function), State.class))[0];
    final Function1<State, Boolean> _function_1 = (State state) -> {
      return Boolean.valueOf((state instanceof Final));
    };
    State finalState = ((State[])Conversions.unwrapArray(IterableExtensions.<State>filter(fsm.getState(), _function_1), State.class))[0];
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(" ");
    _builder.append("public class FSM {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("public void execute() {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("import java.util.Scanner;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("List<Transition> transitions = new ArrayList<>();");
    _builder.newLine();
    {
      EList<Transition> _transition = fsm.getTransition();
      for(final Transition tr : _transition) {
        _builder.append("\t\t\t\t\t\t\t\t\t\t");
        _builder.append("transitions.add(new Transition(new State(\"");
        String _name = tr.getState1().getName();
        _builder.append(_name, "\t\t\t\t\t\t\t\t\t\t");
        _builder.append("\"), new State(\"");
        String _name_1 = tr.getState2().getName();
        _builder.append(_name_1, "\t\t\t\t\t\t\t\t\t\t");
        _builder.append("\"), \"");
        String _name_2 = tr.getName();
        _builder.append(_name_2, "\t\t\t\t\t\t\t\t\t\t");
        _builder.append("\"));");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("Scanner sc = new Scanner(System.in);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("StateAbstr current = new State(\"");
    String _name_3 = initState.getName();
    _builder.append(_name_3, "\t\t\t\t\t\t\t\t\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("StateAbstr finalState = new State(\"");
    String _name_4 = finalState.getName();
    _builder.append(_name_4, "\t\t\t\t\t\t\t\t\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("System.out.println(\"Bonjour\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("while(!current.equals(finalState)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("System.out.println(\"State current : \" + current.getState());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("final StateAbstr currentState = current;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("final String trigger = sc.nextLine(); ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("Transition transition = transitions.stream()");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append(".filter(tr -> tr.getStateStart().equals(currentState) && tr.getTrigger().equals(trigger))");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append(".findFirst().orElse(null);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("if (transition != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("current = transition.getStateEnd();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("System.out.println(\"Transition null\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("System.out.println(\"nouveau state : \" + current.getState());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("System.out.println(\"Etat final : FIN\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("FSM fsm = new FSM();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append("fsm.execute();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    return _builder.toString();
  }
}
